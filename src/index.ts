import { serializeGraph as coreSerializeGraph } from 'scn-ts-core';
import type { RankedCodeGraph, FileContent, SerializeGraphOptions } from 'scn-ts-core';

/**
 * Creates a function to retrieve file content from an array of FileContent objects.
 * This is useful for providing the `getSourceContent` option to `serializeGraph`.
 * @param files - The array of files from which to look up content.
 * @returns A function that takes a file path and returns its content.
 */
export const createSourceContentGetter = (files: readonly FileContent[]): ((filePath: string) => string | undefined) => {
  const fileMap = new Map(files.map(f => [f.path, f.content]));
  return (filePath: string) => fileMap.get(filePath);
};

/**
 * Generates an SCN context map from a `RankedCodeGraph` in a browser environment.
 *
 * This function orchestrates the process:
 * 1. Takes a `RankedCodeGraph` (presumably generated by `repograph-browser`).
 * 2. Takes the original `FileContent[]` to enable source-based analysis.
 * 3. Serializes the graph into the SCN text format using `scn-ts-core`.
 *
 * @param graph - The `RankedCodeGraph` to serialize.
 * @param files - The original array of `FileContent` used to generate the graph.
 * @param options - Additional options for serialization (rarely needed in browser).
 * @returns The SCN map as a string.
 */
export const generateScn = (
  graph: RankedCodeGraph,
  files: readonly FileContent[],
  options?: Omit<SerializeGraphOptions, 'getSourceContent'>
): string => {
  const getSourceContent = createSourceContentGetter(files);
  return coreSerializeGraph(graph, { ...options, getSourceContent });
};


// Re-export from scn-ts-core for convenience
export { serializeGraph } from 'scn-ts-core';
export type {
  RankedCodeGraph,
  FileContent,
  CodeNode,
  CodeEdge,
  CodeGraph,
  SerializeGraphOptions,
} from 'scn-ts-core';